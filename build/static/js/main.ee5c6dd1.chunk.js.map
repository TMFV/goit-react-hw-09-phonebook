{"version":3,"sources":["redux/app/app-reducer.js","redux/auth/auth-reducers.js","redux/store.js","components/AuthNav.js","redux/auth/auth-selectors.js","components/UserMenu.js","components/Navigation.js","components/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","index.js","redux/auth/auth-operations.js","redux/auth/auth-actions.js","redux/app/app-operations.js","redux/app/app-actions.js"],"names":["contacts","createReducer","actions","fetchContactSuccess","_","payload","addContactSuccess","state","operations","addContact","type","map","cur","name","includes","alert","deleteContactSuccess","types","newArrAfterDel","filter","elem","id","loading","addContactRequest","addContactError","deleteContactRequest","deleteContactError","fetchContactRequest","fetchContactError","filters","filterSet","combineReducers","initialUserState","email","user","authActions","registerSuccess","loginSuccess","logoutSuccess","getCurrentUserSuccess","token","setError","error","registerError","loginError","logoutError","getCurrentUserError","isAuthenticated","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","app","appReducer","auth","persistReducer","authReducer","devTools","process","persistor","persistStore","styles","link","margin","display","color","activeLink","AuthNav","Button","variant","style","height","to","exact","activeStyle","marginLeft","container","alignItems","mail","marginRight","fontWeight","mapDispatchToProps","onLogout","authOperations","logOut","connect","authSelectors","onClick","textDecoration","padding","header","justifyContent","borderBottom","PrivateRoute","children","redirectTo","routeProps","isLoggedIn","useSelector","PublicRoute","restricted","shouldRedirect","HomeView","lazy","LoginView","RegisterView","ContactsView","App","this","props","onGetCurrentUser","className","fallback","path","component","Component","mapDispatchToProrps","getCurrentUser","ReactDOM","render","StrictMode","document","getElementById","axios","defaults","baseURL","headers","common","Authorization","register","credentials","dispatch","a","registerRequest","post","response","data","message","logoutRequest","logIn","loginRequest","getState","persistedToken","getCurrentUserRequest","get","createAction","fetchContacts","contact","then","catch","deleteContact","contactId","delete"],"mappings":"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","file":"static/js/main.ee5c6dd1.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport actions from \"./app-actions\";\nimport operations from \"./app-operations\";\n\nconst contacts = createReducer([], {\n  [actions.fetchContactSuccess]: (_, { payload }) => payload,\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\n\n  [operations.addContact]: (state, { type, payload }) => {\n    let nameArray = state.map((cur) => cur.name);\n    if (!nameArray.includes(payload.name)) {\n      return [...state, payload];\n    } else {\n      alert(\" Контакт вже є у телефонній книзі!!!\");\n      return state;\n    }\n  },\n  [actions.deleteContactSuccess]: (state, { types, payload }) => {\n    let newArrAfterDel = state.filter((elem) => elem.id !== payload);\n    return [...newArrAfterDel];\n  },\n});\n\nconst loading = createReducer(false, {\n  [actions.addContactRequest]: () => true,\n  [actions.addContactSuccess]: () => false,\n  [actions.addContactError]: () => false,\n  [actions.deleteContactRequest]: () => true,\n  [actions.deleteContactSuccess]: () => false,\n  [actions.deleteContactError]: () => false,\n  [actions.fetchContactRequest]: () => true,\n  [actions.fetchContactSuccess]: () => false,\n  [actions.fetchContactError]: () => false,\n});\n\nconst filters = createReducer(\"\", {\n  [actions.filterSet]: (state, { payload }) => {\n    return payload;\n  },\n});\n\nexport default combineReducers({ contacts, filters, loading });\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport authActions from \"./auth-actions\";\n\nconst initialUserState = { name: null, email: null };\n\nconst user = createReducer(initialUserState, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\n  [authActions.logoutSuccess]: () => initialUserState,\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\n});\n\nconst token = createReducer(null, {\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\n  [authActions.logoutSuccess]: () => null,\n});\n\nconst setError = (_, { payload }) => payload;\n\nconst error = createReducer(null, {\n  [authActions.registerError]: setError,\n  [authActions.loginError]: setError,\n  [authActions.logoutError]: setError,\n  [authActions.getCurrentUserError]: setError,\n});\nconst isAuthenticated = createReducer(false, {\n  [authActions.registerSuccess]: () => true,\n  [authActions.loginSuccess]: () => true,\n  [authActions.getCurrentUserSuccess]: () => true,\n  [authActions.registerError]: () => false,\n  [authActions.loginError]: () => false,\n  [authActions.logoutError]: () => false,\n  [authActions.getCurrentUserError]: () => false,\n  [authActions.logoutSuccess]: () => false,\n});\n\nexport default combineReducers({\n  user,\n  token,\n  isAuthenticated,\n  error,\n});\n","//import { combineReducers } from \"redux\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport storage from \"redux-persist/lib/storage\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n\nimport appReducer from \"./app/app-reducer\";\nimport authReducer from \"./auth/auth-reducers\";\n\n//console.log(getDefaultMiddleware());\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\nconst authPersistConfig = {\n  key: \"auth\",\n  storage,\n  whitelist: [\"token\"],\n};\nconst store = configureStore({\n  reducer: {\n    app: appReducer,\n    auth: persistReducer(authPersistConfig, authReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\nexport default { store, persistor };\n","import { NavLink } from \"react-router-dom\";\nimport Button from \"@material-ui/core/Button\";\nconst styles = {\n  link: {\n    margin: 5,\n    display: \"block\",\n    color: \"white\",\n  },\n  activeLink: {\n    margin: 5,\n    display: \"block\",\n    color: \"red\",\n  },\n};\n\nconst AuthNav = () => (\n  <div>\n    <Button\n      type=\"click\"\n      variant=\"contained\"\n      color=\"primary\"\n      style={{ height: 30 }}\n    >\n      <NavLink\n        to=\"/register\"\n        exact\n        style={styles.link}\n        activeStyle={styles.activeLink}\n      >\n        Registration\n      </NavLink>\n    </Button>\n    <Button\n      style={{ marginLeft: 15, height: 30 }}\n      type=\"click\"\n      variant=\"contained\"\n      color=\"primary\"\n    >\n      <NavLink\n        to=\"/login\"\n        exact\n        style={styles.link}\n        activeStyle={styles.activeLink}\n      >\n        Login\n      </NavLink>\n    </Button>\n  </div>\n);\n\nexport default AuthNav;\n","//export default authSelectors;\nconst isAuthenticated = (state) => state.auth.isAuthenticated;\nconst userName = (state) => state.auth.user.name;\nconst userMail = (state) => state.auth.user.email;\n\nexport default {\n  isAuthenticated,\n  userName,\n  userMail,\n};\n","import { connect } from \"react-redux\";\nimport authSelectors from \"../redux/auth/auth-selectors\";\nimport authOperations from \"../redux/auth/auth-operations\";\nimport Button from \"@material-ui/core/Button\";\n\nconst styles = {\n  container: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  mail: {\n    marginRight: 10,\n  },\n  name: {\n    fontWeight: 700,\n    marginRight: 20,\n  },\n};\n\nconst UserMenu = ({ mail, name, onLogout }) => (\n  <div style={styles.container}>\n    <span style={styles.mail}>User e-mail: {mail}</span>\n    <span style={styles.name}>User name: {name}</span>\n    <Button\n      type=\"button\"\n      onClick={onLogout}\n      variant=\"contained\"\n      color=\"primary\"\n    >\n      Logout 🟥\n    </Button>\n  </div>\n);\n\nconst mapStateToProps = (state) => ({\n  name: authSelectors.userName(state),\n  mail: authSelectors.userMail(state),\n});\nconst mapDispatchToProps = {\n  onLogout: authOperations.logOut,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport authSelectors from \"../redux/auth/auth-selectors\";\nconst styles = {\n  link: {\n    display: \"inline-block\",\n    textDecoration: \"none\",\n    padding: 12,\n    fontWeight: 700,\n    color: \"#2A363B\",\n  },\n  activeLink: {\n    color: \"#E84A5F\",\n  },\n};\n\nconst Navigation = ({ isAuthenticated }) => (\n  <nav>\n    <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\n      Home\n    </NavLink>\n    {isAuthenticated && (\n      <NavLink\n        to=\"/contacts\"\n        exact\n        style={styles.link}\n        activeStyle={styles.activeLink}\n      >\n        Contacts\n      </NavLink>\n    )}\n  </nav>\n);\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: authSelectors.isAuthenticated(state),\n});\n\nexport default connect(mapStateToProps)(Navigation);\n","import AuthNav from \"./AuthNav\";\nimport UserMenu from \"./UserMenu\";\nimport Navigation from \"./Navigation\";\nimport { connect } from \"react-redux\";\nimport authSelectors from \"../redux/auth/auth-selectors\";\n\nconst styles = {\n  header: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    borderBottom: \"1px solid #2A363B\",\n  },\n};\n\nconst AppBar = ({ isAuthenticated }) => (\n  <header style={styles.header}>\n    <Navigation />\n    {isAuthenticated ? <UserMenu /> : <AuthNav />}\n  </header>\n);\nconst mapStateToProps = (state) => ({\n  isAuthenticated: authSelectors.isAuthenticated(state),\n});\nexport default connect(mapStateToProps)(AppBar);\n","import { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport authSelectors from \"../redux/auth/auth-selectors\";\n\n/**\n * 1. Он должен повторять API Route\n *  2. Он должен рендерить Route\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\n * - В противном случае рендерит Redirect на redirectTo\n */\n\nexport default function PrivateRoute({\n  children,\n  redirectTo = \"/\",\n  ...routeProps\n}) {\n  const isLoggedIn = useSelector(authSelectors.isAuthenticated);\n  return (\n    <Route {...routeProps}>\n      {isLoggedIn ? children : <Redirect to={redirectTo} />}\n    </Route>\n  );\n}\n","import { useSelector } from \"react-redux\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport authSelectors from \"../redux/auth/auth-selectors\";\n\n/**\n * - Если маршрут ограниченный, и юзер залогинен, рендерит редирект на redirectTo\n * - В противном случае рендерит компонент\n *\n */\n\nexport default function PublicRoute({\n  children,\n  restricted = false,\n  redirectTo = \"/\",\n  ...routeProps\n}) {\n  const isLoggedIn = useSelector(authSelectors.isAuthenticated);\n  const shouldRedirect = isLoggedIn && restricted;\n  return (\n    <Route {...routeProps}>\n      {shouldRedirect ? <Redirect to={redirectTo} /> : children}\n    </Route>\n  );\n}\n","import React, { Component, Suspense, lazy } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport AppBar from \"./components/AppBar\";\nimport authOperations from \"./redux/auth/auth-operations\";\nimport PrivateRoute from \"./components/PrivateRoute\";\nimport PublicRoute from \"./components/PublicRoute\";\n\nconst HomeView = lazy(() => import(\"./views/HomeView\"));\nconst LoginView = lazy(() => import(\"./views/LoginView\"));\nconst RegisterView = lazy(() => import(\"./views/RegisterView\"));\nconst ContactsView = lazy(() => import(\"./views/ContactsView\"));\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onGetCurrentUser();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AppBar />\n        <Suspense fallback={<p>Loading...</p>}>\n          <Switch>\n            <Route exact path=\"/\" component={HomeView} />\n            <PublicRoute path=\"/register\" redirectTo=\"/contacts\" restricted>\n              <Route path=\"/register\" component={RegisterView} />\n            </PublicRoute>\n            <PublicRoute path=\"/login\" redirectTo=\"/contacts\" restricted>\n              <Route path=\"/login\" component={LoginView} />\n            </PublicRoute>\n            <PrivateRoute path=\"/contacts\" redirectTo=\"/login\">\n              <Route path=\"/contacts\" component={ContactsView} />\n            </PrivateRoute>\n          </Switch>\n        </Suspense>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProrps = {\n  onGetCurrentUser: authOperations.getCurrentUser,\n};\n\nexport default connect(null, mapDispatchToProrps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport store from \"./redux/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import axios from \"axios\";\nimport authActions from \"./auth-actions\";\n\naxios.defaults.baseURL = \"https://connections-api.herokuapp.com\";\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = \"\";\n  },\n};\n\nconst register = (credentials) => async (dispatch) => {\n  dispatch(authActions.registerRequest());\n\n  try {\n    const response = await axios.post(\"/users/signup\", credentials);\n    dispatch(authActions.registerSuccess(response.data));\n    token.set(response.data.token);\n  } catch (error) {\n    dispatch(authActions.registerError(error.message));\n  }\n};\n\nconst logIn = (credentials) => async (dispatch) => {\n  dispatch(authActions.loginRequest());\n\n  try {\n    const response = await axios.post(\"/users/login\", credentials);\n    dispatch(authActions.loginSuccess(response.data));\n    token.set(response.data.token);\n  } catch (error) {\n    dispatch(authActions.loginError(error.message));\n  }\n};\n\nconst logOut = () => async (dispatch) => {\n  dispatch(authActions.logoutRequest());\n\n  try {\n    await axios.post(\"/users/logout\");\n    dispatch(authActions.logoutSuccess());\n    token.unset();\n  } catch (error) {\n    dispatch(authActions.logoutError(error.message));\n  }\n};\n\nconst getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n  //state.auth.token\n  if (!persistedToken) {\n    return;\n  }\n  token.set(persistedToken);\n  dispatch(authActions.getCurrentUserRequest());\n  try {\n    const response = await axios.get(\"/users/current\");\n    dispatch(authActions.getCurrentUserSuccess(response.data));\n  } catch (error) {\n    dispatch(authActions.getCurrentUserError(error.message));\n  }\n};\n\nexport default { register, logOut, logIn, getCurrentUser };\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst registerRequest = createAction(\"auth/registerRequest\");\nconst registerSuccess = createAction(\"auth/registerSuccess\");\nconst registerError = createAction(\"auth/registerError\");\n\nconst loginRequest = createAction(\"auth/loginRequest\");\nconst loginSuccess = createAction(\"auth/loginSuccess\");\nconst loginError = createAction(\"auth/loginError\");\n\nconst logoutRequest = createAction(\"auth/logoutRequest\");\nconst logoutSuccess = createAction(\"auth/logoutSuccess\");\nconst logoutError = createAction(\"auth/logoutError\");\n\nconst getCurrentUserRequest = createAction(\"auth/getCurrentUserRequest\");\nconst getCurrentUserSuccess = createAction(\"auth/getCurrentUserSuccess\");\nconst getCurrentUserError = createAction(\"auth/getCurrentUserError\");\n\nexport default {\n  registerRequest,\n  registerSuccess,\n  registerError,\n  logoutRequest,\n  logoutSuccess,\n  logoutError,\n  loginRequest,\n  loginSuccess,\n  loginError,\n  getCurrentUserRequest,\n  getCurrentUserSuccess,\n  getCurrentUserError,\n};\n","import axios from \"axios\";\nimport actions from \"./app-actions\";\n\n//ASYNC Version\nconst fetchContacts = () => async (dispatch) => {\n  dispatch(actions.fetchContactRequest());\n  try {\n    const { data } = await axios.get(\"/contacts\");\n    dispatch(actions.fetchContactSuccess(data));\n  } catch (error) {\n    dispatch(actions.deleteContactError(error.message));\n  }\n};\nconst addContact = (contact) => (dispatch) => {\n  dispatch(actions.addContactRequest());\n\n  axios\n    .post(\"/contacts\", contact)\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\n    .catch((error) => dispatch(actions.addContactError(error.message)));\n};\n\nconst deleteContact = (contactId) => (dispatch) => {\n  dispatch(actions.deleteContactRequest());\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\n    .catch((error) => dispatch(actions.deleteContactError(error.message)));\n};\n\nexport default {\n  fetchContacts,\n  addContact,\n  deleteContact,\n};\n","import { createAction } from \"@reduxjs/toolkit\";\n\nconst addContactRequest = createAction(\"contacts/addContactRequest\");\nconst addContactSuccess = createAction(\"contacts/addContactSuccess\");\nconst addContactError = createAction(\"contacts/addContactError\");\n\nconst deleteContactRequest = createAction(\"contacts/deleteContactRequest\");\nconst deleteContactSuccess = createAction(\"contacts/deleteContactSuccess\");\nconst deleteContactError = createAction(\"contacts/deleteContactError\");\n\nconst fetchContactRequest = createAction(\"contacts/fetchContactRequest\");\nconst fetchContactSuccess = createAction(\"contacts/fetchContactSuccess\");\nconst fetchContactError = createAction(\"contacts/fetchContactError\");\n\nconst filterSet = createAction(\"app/setFilterArr\");\n\nexport default {\n  filterSet,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactRequest,\n  fetchContactSuccess,\n  fetchContactError,\n};\n"],"sourceRoot":""}